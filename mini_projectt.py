# -*- coding: utf-8 -*-
"""Mini_projectt.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1ZyqKQpLY355ArHYXcex6qPL7RWMhYv98
"""

!pip install matplotlib-venn

!pip install SexMachine



import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import accuracy_score, confusion_matrix, classification_report
import numpy as np

# Load the dataset
dataset = pd.read_csv('/content/Dataset_Fake_Profile.csv')

dataset.head()

dataset.tail()

dataset.describe

dataset.size

# Separate features and target variable
x = dataset[['User_Name', 'Number_Of_Friends', 'Number_Of_Followers']]
y = dataset['Status']

# Split the dataset into training and testing sets
x_train, x_test, y_train, y_test = train_test_split(x, y, test_size=0.2, random_state=42)

rf_classifier = RandomForestClassifier(n_estimators=100, random_state=42)
rf_classifier.fit(x_train[['Number_Of_Followers', 'Number_Of_Friends']], y_train)

rf_predictions = rf_classifier.predict(x_test[['Number_Of_Followers', 'Number_Of_Friends']])
rf_accuracy = accuracy_score(y_test, rf_predictions)

print("Random Forest Accuracy:", rf_accuracy)

from sklearn.svm import SVC

svm_classifier = SVC(kernel='linear', random_state=42)
svm_classifier.fit(x_train[['Number_Of_Followers', 'Number_Of_Friends']], y_train)

svm_predictions = svm_classifier.predict(x_test[['Number_Of_Followers', 'Number_Of_Friends']])
svm_accuracy = accuracy_score(y_test, svm_predictions)

print("SVM Accuracy:", svm_accuracy)

model = RandomForestClassifier(n_estimators=100, random_state=42)

model.fit(x[['Number_Of_Followers', 'Number_Of_Friends']], y)

def preprocess_input(User_Name, Number_Of_Followers, Number_Of_Friends):

    return User_Name, Number_Of_Followers, Number_Of_Friends

def predict_profile(dataset):
    # Predict using the pre-trained model
    prediction = model.predict(dataset)

    result = []
    for pred in prediction:
        if pred == 0:
            result.append("The profile is fake")
        else:
            result.append("The profile is genuine")
    return result

X = dataset[['User_Name', 'Number_Of_Followers', 'Number_Of_Friends']]
y = dataset['Status']

# Train the model with the entire dataset
model.fit(X[['Number_Of_Followers', 'Number_Of_Friends']], y)

# Function to preprocess input data
def preprocess_input(username, followers, friends):
    return followers, friends

def predict_profile(username, followers, friends):
    # Preprocess the input data
    followers, friends = preprocess_input(username, followers, friends)

    # Convert input into numpy array
    input_data_array = np.array([[followers, friends]])

    # Predict using the pre-trained model
    prediction = model.predict(input_data_array)

    if prediction[0] == 0:
        return "Fake profile"
    else:
        return "Genuine profile"

# Taking input from the user
User_Name = input("Enter username: ")
Number_Of_Followers = int(input("Enter number of followers: "))
Number_Of_Friends = int(input("Enter number of friends: "))

# Finding the profile in the dataset
profile = dataset.loc[dataset['User_Name'] == User_Name]

if len(profile) == 0:
    print("Profile not found in the dataset.")
else:
    # Getting the features from the dataset
    followers = profile['Number_Of_Followers'].values[0]
    friends = profile['Number_Of_Friends'].values[0]

    # Predicting profile authenticity
    prediction = predict_profile(User_Name, followers, friends)
    print("Prediction:", prediction)